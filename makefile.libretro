
SRC_DIR           = $(CORE_DIR)/src
LIBRETRO_COMM_DIR = $(SRC_DIR)/osd/retro/libretro-common
DEPS_DIR          = $(SRC_DIR)/lib

INCFLAGS := \
	-I$(LIBRETRO_COMM_DIR)/include \
	-I$(SRC_DIR)/$(TARGET) \
	-I$(SRC_DIR)/emu \
	-I$(OBJ)/emu \
	-I$(DEPS_DIR)/util \
	-I$(SRC_DIR)/lib \
	-I$(SRC_DIR)/osd \
	-I$(SRC_DIR)/osd/retro \

# add expat XML library
INCFLAGS += -I$(DEPS_DIR)/expat
EXPAT = $(OBJ)/libexpat.a

# add PortMidi MIDI library
ifeq ($(BUILD_MIDILIB), 1)
   INCFLAGS += -I$(DEPS_DIR)/portmidi
   MIDI_LIB = $(OBJ)/libportmidi.a
else
   MIDI_LIB =
endif

LIBS += -lz

# then the various core pieces
MAMESRC = $(SRC_DIR)/mame
MAMEOBJ = $(OBJ)/mame

AUDIO   = $(MAMEOBJ)/audio
DRIVERS = $(MAMEOBJ)/drivers
MACHINE = $(MAMEOBJ)/machine
VIDEO   = $(MAMEOBJ)/video

OBJDIRS += \
	$(AUDIO) \
	$(DRIVERS) \
	$(DRIVERS)/capcom		\
	$(DRIVERS)/irem			\
	$(DRIVERS)/neogeo		\
	$(MACHINE) \
	$(VIDEO) \

#-------------------------------------------------
# specify available CPU cores; some of these are
# only for MESS, but are included so that they get
# updated with any MAME core changes
#-------------------------------------------------

CPUS += M680X0
CPUS += MCS48
CPUS += NEC
CPUS += Z80

#-------------------------------------------------
# specify available sound cores; some of these are
# only for MESS and so aren't included
#-------------------------------------------------

SOUNDS += YM2151
SOUNDS += YM2203
SOUNDS += YM2610
SOUNDS += MSM5205
SOUNDS += OKIM6295
SOUNDS += QSOUND
SOUNDS += IREMGA20

#-------------------------------------------------
# this is the list of driver libraries that
# comprise MAME plus mamedriv.o which contains
# the list of drivers
#-------------------------------------------------

DRVLIBS = \
	$(MAMEOBJ)/mamedriv.o \
	$(MAMEOBJ)/capcom.a \
	$(MAMEOBJ)/irem.a \
	$(MAMEOBJ)/neogeo.a \
	$(EMUMACHINE)/ldpr8210.o $(EMUMACHINE)/ldvp931.o \

#-------------------------------------------------
# the following files are general components and
# shared across a number of drivers
#-------------------------------------------------

$(MAMEOBJ)/capcom.a: \
	$(DRIVERS)/capcom/cps1.o $(VIDEO)/cps1.o \
	$(DRIVERS)/capcom/cps2.o \
	$(DRIVERS)/capcom/fcrash.o \
	$(MACHINE)/cps2crpt.o \
	$(MACHINE)/kabuki.o \

$(MAMEOBJ)/irem.a: \
	$(DRIVERS)/irem/m92.o $(VIDEO)/m92.o \
	$(MACHINE)/irem_cpu.o \

$(MAMEOBJ)/neogeo.a: \
	$(DRIVERS)/neogeo/neogeo.o $(VIDEO)/neogeo.o \
	$(MACHINE)/neoboot.o \
	$(MACHINE)/neocrypt.o \
	$(MACHINE)/neoprot.o \

$(DRIVERS)/neogeo.o:	$(MAMESRC)/drivers/neogeo/neogeo.inc

#-------------------------------------------------
# mame emulator core build
#-------------------------------------------------

EMUSRC = $(SRC_DIR)/emu
EMUOBJ = $(OBJ)/emu

EMUAUDIO = $(EMUOBJ)/audio
EMUDRIVERS = $(EMUOBJ)/drivers
EMUMACHINE = $(EMUOBJ)/machine
EMUVIDEO = $(EMUOBJ)/video

OBJDIRS += \
	$(EMUOBJ)/cpu \
	$(EMUOBJ)/sound \
	$(EMUOBJ)/debug \
	$(EMUOBJ)/debugint \
	$(EMUOBJ)/audio \
	$(EMUOBJ)/drivers \
	$(EMUOBJ)/machine \
	$(EMUOBJ)/video

#-------------------------------------------------
# emulator core objects
#-------------------------------------------------

EMUOBJS = \
	$(EMUOBJ)/addrmap.o \
	$(EMUOBJ)/attotime.o \
	$(EMUOBJ)/audit.o \
	$(EMUOBJ)/cheat.o \
	$(EMUOBJ)/clifront.o \
	$(EMUOBJ)/config.o \
	$(EMUOBJ)/crsshair.o \
	$(EMUOBJ)/debugger.o \
	$(EMUOBJ)/delegate.o \
	$(EMUOBJ)/devcb.o \
	$(EMUOBJ)/devcpu.o \
	$(EMUOBJ)/devimage.o \
	$(EMUOBJ)/devlegcy.o \
	$(EMUOBJ)/devintrf.o \
	$(EMUOBJ)/didisasm.o \
	$(EMUOBJ)/diexec.o \
	$(EMUOBJ)/diimage.o \
	$(EMUOBJ)/dimemory.o \
	$(EMUOBJ)/dinvram.o \
	$(EMUOBJ)/disound.o \
	$(EMUOBJ)/distate.o \
	$(EMUOBJ)/drawgfx.o \
	$(EMUOBJ)/driver.o \
	$(EMUOBJ)/emualloc.o \
	$(EMUOBJ)/emucore.o \
	$(EMUOBJ)/emuopts.o \
	$(EMUOBJ)/emupal.o \
	$(EMUOBJ)/fileio.o \
	$(EMUOBJ)/hash.o \
	$(EMUOBJ)/hashfile.o \
	$(EMUOBJ)/image.o \
	$(EMUOBJ)/info.o \
	$(EMUOBJ)/input.o \
	$(EMUOBJ)/inputseq.o \
	$(EMUOBJ)/inptport.o \
	$(EMUOBJ)/ioprocs.o \
	$(EMUOBJ)/mame.o \
	$(EMUOBJ)/machine.o \
	$(EMUOBJ)/mconfig.o \
	$(EMUOBJ)/memory.o \
	$(EMUOBJ)/output.o \
	$(EMUOBJ)/render.o \
	$(EMUOBJ)/rendfont.o \
	$(EMUOBJ)/rendlay.o \
	$(EMUOBJ)/rendutil.o \
	$(EMUOBJ)/romload.o \
	$(EMUOBJ)/schedule.o \
	$(EMUOBJ)/softlist.o \
	$(EMUOBJ)/sound.o \
	$(EMUOBJ)/state.o \
	$(EMUOBJ)/streams.o \
	$(EMUOBJ)/tilemap.o \
	$(EMUOBJ)/timer.o \
	$(EMUOBJ)/ui.o \
	$(EMUOBJ)/uigfx.o \
	$(EMUOBJ)/uiimage.o \
	$(EMUOBJ)/uiinput.o \
	$(EMUOBJ)/uimenu.o \
	$(EMUOBJ)/validity.o \
	$(EMUOBJ)/video.o \
	$(EMUOBJ)/watchdog.o \
	$(EMUOBJ)/debug/debugcmd.o \
	$(EMUOBJ)/debug/debugcmt.o \
	$(EMUOBJ)/debug/debugcon.o \
	$(EMUOBJ)/debug/debugcpu.o \
	$(EMUOBJ)/debug/debughlp.o \
	$(EMUOBJ)/debug/debugvw.o \
	$(EMUOBJ)/debug/dvdisasm.o \
	$(EMUOBJ)/debug/dvmemory.o \
	$(EMUOBJ)/debug/dvstate.o \
	$(EMUOBJ)/debug/dvtext.o \
	$(EMUOBJ)/debug/express.o \
	$(EMUOBJ)/debug/textbuf.o \
	$(EMUOBJ)/debugint/debugint.o

ifdef PROFILER
EMUOBJS += \
	$(EMUOBJ)/profiler.o
endif

EMUSOUNDOBJS = \
	$(EMUOBJ)/sound/wavwrite.o \

EMUAUDIOOBJS = \
	$(EMUAUDIO)/generic.o \

EMUDRIVEROBJS = \
	$(EMUDRIVERS)/empty.o \

EMUMACHINEOBJS = \
	$(EMUMACHINE)/8255ppi.o \
	$(EMUMACHINE)/eeprom.o \
	$(EMUMACHINE)/generic.o \
	$(EMUMACHINE)/ldcore.o \
	$(EMUMACHINE)/ldv1000.o \
	$(EMUMACHINE)/pd4990a.o \
	$(EMUMACHINE)/z80ctc.o \
	$(EMUMACHINE)/timekpr.o \

EMUVIDEOOBJS = \
	$(EMUVIDEO)/generic.o \
	$(EMUVIDEO)/resnet.o \
	$(EMUVIDEO)/vector.o \


# 
LIBEMUOBJS = $(EMUOBJS) $(EMUSOUNDOBJS) $(EMUAUDIOOBJS) $(EMUDRIVEROBJS) $(EMUMACHINEOBJS) $(EMUVIDEOOBJS)

$(LIBEMU): $(LIBEMUOBJS)

#-------------------------------------------------
# CPU core objects
#-------------------------------------------------

CPUSRC = $(EMUSRC)/cpu
CPUOBJ = $(EMUOBJ)/cpu

#-------------------------------------------------
# Shared code
#-------------------------------------------------

OBJDIRS += $(CPUOBJ)
CPUOBJS += $(CPUOBJ)/vtlb.o

#-------------------------------------------------
# Intel MCS-48 (8039 and derivatives)
#-------------------------------------------------

ifneq ($(filter MCS48,$(CPUS)),)
OBJDIRS += $(CPUOBJ)/mcs48
CPUOBJS += $(CPUOBJ)/mcs48/mcs48.o
DASMOBJS += $(CPUOBJ)/mcs48/mcs48dsm.o
endif

$(CPUOBJ)/mcs48/mcs48.o:	$(CPUSRC)/mcs48/mcs48.c \
					$(CPUSRC)/mcs48/mcs48.h

#-------------------------------------------------
# Motorola 68000 series
#-------------------------------------------------

ifneq ($(filter M680X0,$(CPUS)),)
OBJDIRS += $(CPUOBJ)/m68000
CPUOBJS += $(CPUOBJ)/m68000/m68kcpu.o $(CPUOBJ)/m68000/m68kops.o
endif

# when we compile generated files we need to include stuff from the src directory
$(CPUOBJ)/m68000/%.o: $(CPUSRC)/m68000/%.c | $(OSPREBUILD)
	@echo Compiling $<...
	$(CC) $(CDEFS) $(CFLAGS) -I$(CPUSRC)/m68000 -c $< -o $@

#-------------------------------------------------
# NEC V-series Intel-compatible
#-------------------------------------------------

ifneq ($(filter NEC,$(CPUS)),)
OBJDIRS += $(CPUOBJ)/nec
CPUOBJS += $(CPUOBJ)/nec/nec.o
CPUOBJS += $(CPUOBJ)/nec/v25.o
CPUOBJS += $(CPUOBJ)/nec/v25sfr.o
DASMOBJS += $(CPUOBJ)/nec/necdasm.o
endif

$(CPUOBJ)/nec/nec.o:	$(CPUSRC)/nec/nec.c \
				$(CPUSRC)/nec/nec.h \
					$(CPUSRC)/nec/necea.h \
						$(CPUSRC)/nec/necinstr.c \
							$(CPUSRC)/nec/necinstr.h \
								$(CPUSRC)/nec/necmodrm.h \
									$(CPUSRC)/nec/necpriv.h

$(CPUOBJ)/nec/v25.o:	$(CPUSRC)/nec/v25.c \
				$(CPUSRC)/nec/nec.h \
					$(CPUSRC)/nec/necea.h \
						$(CPUSRC)/nec/necinstr.c \
							$(CPUSRC)/nec/v25instr.c \
								$(CPUSRC)/nec/v25instr.h \
									$(CPUSRC)/nec/necmodrm.h \
										$(CPUSRC)/nec/v25priv.h

$(CPUOBJ)/nec/v25sfr.o:		$(CPUSRC)/nec/v25sfr.c \
					$(CPUSRC)/nec/nec.h \
						$(CPUSRC)/nec/v25priv.h

#-------------------------------------------------
# Zilog Z80
#-------------------------------------------------

ifneq ($(filter Z80,$(CPUS)),)
OBJDIRS += $(CPUOBJ)/z80
CPUOBJS += $(CPUOBJ)/z80/z80.o $(CPUOBJ)/z80/z80daisy.o
DASMOBJS += $(CPUOBJ)/z80/z80dasm.o
endif

$(CPUOBJ)/z80/z80.o:	$(CPUSRC)/z80/z80.c \
				$(CPUSRC)/z80/z80.h


# 
$(LIBCPU): $(CPUOBJS)
$(LIBDASM): $(DASMOBJS)

#-------------------------------------------------
# sound core objects
#-------------------------------------------------

SOUNDSRC = $(EMUSRC)/sound
SOUNDOBJ = $(EMUOBJ)/sound

#-------------------------------------------------
# Core sound types; samples always required
#-------------------------------------------------

SOUNDOBJS += $(SOUNDOBJ)/samples.o

#-------------------------------------------------
# Irem custom sound chips
#-------------------------------------------------

ifneq ($(filter IREMGA20,$(SOUNDS)),)
SOUNDOBJS += $(SOUNDOBJ)/iremga20.o
endif

#-------------------------------------------------
# OKI ADPCM sample players
#-------------------------------------------------

ifneq ($(filter MSM5205,$(SOUNDS)),)
SOUNDOBJS += $(SOUNDOBJ)/msm5205.o
endif

ifneq ($(filter OKIM6295,$(SOUNDS)),)
SOUNDOBJS += $(SOUNDOBJ)/okim6295.o
endif

#-------------------------------------------------
# QSound sample player
#-------------------------------------------------

ifneq ($(filter QSOUND,$(SOUNDS)),)
SOUNDOBJS += $(SOUNDOBJ)/qsound.o
endif

#-------------------------------------------------
# Yamaha FM synthesizers
#-------------------------------------------------

ifneq ($(filter YM2151,$(SOUNDS)),)
SOUNDOBJS += $(SOUNDOBJ)/2151intf.o $(SOUNDOBJ)/ym2151.o
endif

ifneq ($(filter YM2203,$(SOUNDS)),)
SOUNDOBJS += $(SOUNDOBJ)/2203intf.o $(SOUNDOBJ)/ay8910.o $(SOUNDOBJ)/fm.o
endif

ifneq ($(filter YM2610 YM2610B,$(SOUNDS)),)
SOUNDOBJS += $(SOUNDOBJ)/2610intf.o $(SOUNDOBJ)/ay8910.o $(SOUNDOBJ)/fm.o $(SOUNDOBJ)/ymdeltat.o
endif

# 
$(LIBSOUND): $(SOUNDOBJS)

#-------------------------------------------------
# additional dependencies
#-------------------------------------------------

LIBSRC = $(SRC_DIR)/lib
LIBOBJ = $(OBJ)/lib

OBJDIRS += \
	$(LIBOBJ)/util \
	$(LIBOBJ)/expat \

#-------------------------------------------------
# utility library objects
#-------------------------------------------------

UTILOBJS = \
	$(LIBOBJ)/util/astring.o \
	$(LIBOBJ)/util/avcomp.o \
	$(LIBOBJ)/util/aviio.o \
	$(LIBOBJ)/util/bitmap.o \
	$(LIBOBJ)/util/chd.o \
	$(LIBOBJ)/util/corefile.o \
	$(LIBOBJ)/util/corestr.o \
	$(LIBOBJ)/util/coreutil.o \
	$(LIBOBJ)/util/harddisk.o \
	$(LIBOBJ)/util/huffman.o \
	$(LIBOBJ)/util/jedparse.o \
	$(LIBOBJ)/util/md5.o \
	$(LIBOBJ)/util/opresolv.o \
	$(LIBOBJ)/util/options.o \
	$(LIBOBJ)/util/palette.o \
	$(LIBOBJ)/util/png.o \
	$(LIBOBJ)/util/pool.o \
	$(LIBOBJ)/util/sha1.o \
	$(LIBOBJ)/util/tagmap.o \
	$(LIBOBJ)/util/unicode.o \
	$(LIBOBJ)/util/unzip.o \
	$(LIBOBJ)/util/vbiparse.o \
	$(LIBOBJ)/util/xmlfile.o \
	$(LIBOBJ)/util/zippath.o \

$(OBJ)/libutil.a: $(UTILOBJS)

#-------------------------------------------------
# expat library objects
#-------------------------------------------------

EXPATOBJS = \
	$(LIBOBJ)/expat/xmlparse.o \
	$(LIBOBJ)/expat/xmlrole.o \
	$(LIBOBJ)/expat/xmltok.o

$(OBJ)/libexpat.a: $(EXPATOBJS)

$(LIBOBJ)/expat/%.o: $(LIBSRC)/explat/%.c | $(OSPREBUILD)
	@echo Compiling $<...
	$(CC) $(CDEFS) $(CCOMFLAGS) $(CONLYFLAGS) -c $< -o $@


###########################################################################
#
#   retro.mak : based on osdmini.mak
#
#   ANDROID RETROARCH OS Dependent  makefile
#
###########################################################################
#
#   Copyright Aaron Giles
#   All rights reserved.
#
#   Redistribution and use in source and binary forms, with or without
#   modification, are permitted provided that the following conditions are
#   met:
#
#       * Redistributions of source code must retain the above copyright
#         notice, this list of conditions and the following disclaimer.
#       * Redistributions in binary form must reproduce the above copyright
#         notice, this list of conditions and the following disclaimer in
#         the documentation and/or other materials provided with the
#         distribution.
#       * Neither the name 'MAME' nor the names of its contributors may be
#         used to endorse or promote products derived from this software
#         without specific prior written permission.
#
#   THIS SOFTWARE IS PROVIDED BY AARON GILES ''AS IS'' AND ANY EXPRESS OR
#   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
#   WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
#   DISCLAIMED. IN NO EVENT SHALL AARON GILES BE LIABLE FOR ANY DIRECT,
#   INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
#   (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
#   SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
#   HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
#   STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
#   IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#   POSSIBILITY OF SUCH DAMAGE.
#
###########################################################################

#-------------------------------------------------
# object and source roots
#-------------------------------------------------

MINISRC = $(SRC_DIR)/osd/$(OSD)
MINIOBJ = $(OBJ)/osd/$(OSD)
OBJDIRS += $(MINIOBJ) \
		  $(OBJ)/osd/$(OSD)/libretro-common

ifeq ($(HW_RENDER), 0)

else
	GLOBJ = $(OBJ)/osd/$(OSD)/libretro-common/glsym
	OBJDIRS += $(GLOBJ)
endif

#-------------------------------------------------
# OSD core library
#-------------------------------------------------

OSDCOREOBJS := \
	$(MINIOBJ)/retrodir.o \
	$(MINIOBJ)/retrofile.o \
	$(MINIOBJ)/retromisc.o \
	$(MINIOBJ)/retrosync.o \
	$(MINIOBJ)/retrowork.o \
	$(MINIOBJ)/retroos.o

#-------------------------------------------------
# OSD mini library
#-------------------------------------------------

ifeq ($(HW_RENDER), 1)
	OSDOBJS += $(MINIOBJ)/libretro-common/glsym/rglgen.o
	OSDOBJS += $(MINIOBJ)/libretro-common/glsym/glsym_gl.o
else ifeq ($(HW_RENDER), 2)
	OSDOBJS += $(MINIOBJ)/libretro-common/glsym/rglgen.o
	OSDOBJS += $(MINIOBJ)/libretro-common/glsym/glsym_es2.o
endif

OSDOBJS += $(OBJ)/osd/retro/libretro.o

# 
$(LIBOCORE): $(OSDCOREOBJS)

#-------------------------------------------------
# rules for building the libaries
#-------------------------------------------------

OBJECTS = $(DRVLIBS) $(LIBOSD) $(LIBCPU) $(LIBEMU) $(LIBDASM) $(LIBSOUND) $(LIBUTIL) $(EXPAT) $(LIBOCORE)
